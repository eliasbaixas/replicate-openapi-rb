=begin
#Replicate HTTP API

#A web service for running Replicate models

The version of the OpenAPI document: 1.0.0-a1
Contact: team@replicate.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module Replicate
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a collection of models
    # Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/collections/super-resolution ```  The response will be a collection object with a nested list of the models in that collection:  ```json {   \"name\": \"Super resolution\",   \"slug\": \"super-resolution\",   \"description\": \"Upscaling models that create high-quality images from low-quality images.\",   \"models\": [...] } ``` 
    # @param collection_slug [String] The slug of the collection, like &#x60;super-resolution&#x60; or &#x60;image-restoration&#x60;. See [replicate.com/collections](https://replicate.com/collections). 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def collections_get(collection_slug, opts = {})
      collections_get_with_http_info(collection_slug, opts)
      nil
    end

    # Get a collection of models
    # Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/collections/super-resolution &#x60;&#x60;&#x60;  The response will be a collection object with a nested list of the models in that collection:  &#x60;&#x60;&#x60;json {   \&quot;name\&quot;: \&quot;Super resolution\&quot;,   \&quot;slug\&quot;: \&quot;super-resolution\&quot;,   \&quot;description\&quot;: \&quot;Upscaling models that create high-quality images from low-quality images.\&quot;,   \&quot;models\&quot;: [...] } &#x60;&#x60;&#x60; 
    # @param collection_slug [String] The slug of the collection, like &#x60;super-resolution&#x60; or &#x60;image-restoration&#x60;. See [replicate.com/collections](https://replicate.com/collections). 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def collections_get_with_http_info(collection_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.collections_get ...'
      end
      # verify the required parameter 'collection_slug' is set
      if @api_client.config.client_side_validation && collection_slug.nil?
        fail ArgumentError, "Missing the required parameter 'collection_slug' when calling DefaultApi.collections_get"
      end
      # resource path
      local_var_path = '/v1/collections/{collection_slug}'.sub('{' + 'collection_slug' + '}', CGI.escape(collection_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.collections_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#collections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List collections of models
    # Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/collections ```  The response will be a paginated JSON list of collection objects:  ```json {   \"next\": \"null\",   \"previous\": null,   \"results\": [     {       \"name\": \"Super resolution\",       \"slug\": \"super-resolution\",       \"description\": \"Upscaling models that create high-quality images from low-quality images.\"     }   ] } ``` 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def collections_list(opts = {})
      collections_list_with_http_info(opts)
      nil
    end

    # List collections of models
    # Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/collections &#x60;&#x60;&#x60;  The response will be a paginated JSON list of collection objects:  &#x60;&#x60;&#x60;json {   \&quot;next\&quot;: \&quot;null\&quot;,   \&quot;previous\&quot;: null,   \&quot;results\&quot;: [     {       \&quot;name\&quot;: \&quot;Super resolution\&quot;,       \&quot;slug\&quot;: \&quot;super-resolution\&quot;,       \&quot;description\&quot;: \&quot;Upscaling models that create high-quality images from low-quality images.\&quot;     }   ] } &#x60;&#x60;&#x60; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def collections_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.collections_list ...'
      end
      # resource path
      local_var_path = '/v1/collections'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.collections_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#collections_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List available hardware for models
    # Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/hardware ```  The response will be a JSON array of hardware objects:  ```json [     {\"name\": \"CPU\", \"sku\": \"cpu\"},     {\"name\": \"Nvidia T4 GPU\", \"sku\": \"gpu-t4\"},     {\"name\": \"Nvidia A40 GPU\", \"sku\": \"gpu-a40-small\"},     {\"name\": \"Nvidia A40 (Large) GPU\", \"sku\": \"gpu-a40-large\"}, ] ``` 
    # @param [Hash] opts the optional parameters
    # @return [Array<HardwareList200ResponseInner>]
    def hardware_list(opts = {})
      data, _status_code, _headers = hardware_list_with_http_info(opts)
      data
    end

    # List available hardware for models
    # Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/hardware &#x60;&#x60;&#x60;  The response will be a JSON array of hardware objects:  &#x60;&#x60;&#x60;json [     {\&quot;name\&quot;: \&quot;CPU\&quot;, \&quot;sku\&quot;: \&quot;cpu\&quot;},     {\&quot;name\&quot;: \&quot;Nvidia T4 GPU\&quot;, \&quot;sku\&quot;: \&quot;gpu-t4\&quot;},     {\&quot;name\&quot;: \&quot;Nvidia A40 GPU\&quot;, \&quot;sku\&quot;: \&quot;gpu-a40-small\&quot;},     {\&quot;name\&quot;: \&quot;Nvidia A40 (Large) GPU\&quot;, \&quot;sku\&quot;: \&quot;gpu-a40-large\&quot;}, ] &#x60;&#x60;&#x60; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<HardwareList200ResponseInner>, Integer, Hash)>] Array<HardwareList200ResponseInner> data, response status code and response headers
    def hardware_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.hardware_list ...'
      end
      # resource path
      local_var_path = '/v1/hardware'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<HardwareList200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.hardware_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#hardware_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a model
    # Create a model.  Example cURL request:  ```console curl -s -X POST \\   -H \"Authorization: Token <paste-your-token-here>\" \\   -d '{\"owner\": \"alice\" \"name\": \"my-model\", \"description\": \"An example model\", \"visibility\": \"public\", \"hardware\": \"cpu\"}' \\   https://api.replicate.com/v1/models ```  The response will be a model object in the following format:  ```json {   \"url\": \"https://replicate.com/alice/my-model\",   \"owner\": \"alice\",   \"name\": \"my-model\",   \"description\": \"An example model\",   \"visibility\": \"public\",   \"github_url\": null,   \"paper_url\": null,   \"license_url\": null,   \"run_count\": 0,   \"cover_image_url\": null,   \"default_example\": null,   \"latest_version\": null, } ``` 
    # @param models_create_request [ModelsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def models_create(models_create_request, opts = {})
      models_create_with_http_info(models_create_request, opts)
      nil
    end

    # Create a model
    # Create a model.  Example cURL request:  &#x60;&#x60;&#x60;console curl -s -X POST \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   -d &#39;{\&quot;owner\&quot;: \&quot;alice\&quot; \&quot;name\&quot;: \&quot;my-model\&quot;, \&quot;description\&quot;: \&quot;An example model\&quot;, \&quot;visibility\&quot;: \&quot;public\&quot;, \&quot;hardware\&quot;: \&quot;cpu\&quot;}&#39; \\   https://api.replicate.com/v1/models &#x60;&#x60;&#x60;  The response will be a model object in the following format:  &#x60;&#x60;&#x60;json {   \&quot;url\&quot;: \&quot;https://replicate.com/alice/my-model\&quot;,   \&quot;owner\&quot;: \&quot;alice\&quot;,   \&quot;name\&quot;: \&quot;my-model\&quot;,   \&quot;description\&quot;: \&quot;An example model\&quot;,   \&quot;visibility\&quot;: \&quot;public\&quot;,   \&quot;github_url\&quot;: null,   \&quot;paper_url\&quot;: null,   \&quot;license_url\&quot;: null,   \&quot;run_count\&quot;: 0,   \&quot;cover_image_url\&quot;: null,   \&quot;default_example\&quot;: null,   \&quot;latest_version\&quot;: null, } &#x60;&#x60;&#x60; 
    # @param models_create_request [ModelsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def models_create_with_http_info(models_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.models_create ...'
      end
      # verify the required parameter 'models_create_request' is set
      if @api_client.config.client_side_validation && models_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'models_create_request' when calling DefaultApi.models_create"
      end
      # resource path
      local_var_path = '/v1/models'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(models_create_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.models_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#models_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a model
    # Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/models/replicate/hello-world ```  The response will be a model object in the following format:  ```json {   \"url\": \"https://replicate.com/replicate/hello-world\",   \"owner\": \"replicate\",   \"name\": \"hello-world\",   \"description\": \"A tiny model that says hello\",   \"visibility\": \"public\",   \"github_url\": \"https://github.com/replicate/cog-examples\",   \"paper_url\": null,   \"license_url\": null,   \"run_count\": 5681081,   \"cover_image_url\": \"...\",   \"default_example\": {...},   \"latest_version\": {...}, } ```  The `cover_image_url` string is an HTTPS URL for an image file. This can be:  - An image uploaded by the model author. - The output file of the example prediction, if the model author has not set a cover image. - The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file. - A generic fallback image.  The `default_example` object is a [prediction](#predictions.get) created with this model.  The `latest_version` object is the model's most recently pushed [version](#models.versions.get). 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def models_get(model_owner, model_name, opts = {})
      models_get_with_http_info(model_owner, model_name, opts)
      nil
    end

    # Get a model
    # Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/models/replicate/hello-world &#x60;&#x60;&#x60;  The response will be a model object in the following format:  &#x60;&#x60;&#x60;json {   \&quot;url\&quot;: \&quot;https://replicate.com/replicate/hello-world\&quot;,   \&quot;owner\&quot;: \&quot;replicate\&quot;,   \&quot;name\&quot;: \&quot;hello-world\&quot;,   \&quot;description\&quot;: \&quot;A tiny model that says hello\&quot;,   \&quot;visibility\&quot;: \&quot;public\&quot;,   \&quot;github_url\&quot;: \&quot;https://github.com/replicate/cog-examples\&quot;,   \&quot;paper_url\&quot;: null,   \&quot;license_url\&quot;: null,   \&quot;run_count\&quot;: 5681081,   \&quot;cover_image_url\&quot;: \&quot;...\&quot;,   \&quot;default_example\&quot;: {...},   \&quot;latest_version\&quot;: {...}, } &#x60;&#x60;&#x60;  The &#x60;cover_image_url&#x60; string is an HTTPS URL for an image file. This can be:  - An image uploaded by the model author. - The output file of the example prediction, if the model author has not set a cover image. - The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file. - A generic fallback image.  The &#x60;default_example&#x60; object is a [prediction](#predictions.get) created with this model.  The &#x60;latest_version&#x60; object is the model&#39;s most recently pushed [version](#models.versions.get). 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def models_get_with_http_info(model_owner, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.models_get ...'
      end
      # verify the required parameter 'model_owner' is set
      if @api_client.config.client_side_validation && model_owner.nil?
        fail ArgumentError, "Missing the required parameter 'model_owner' when calling DefaultApi.models_get"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.models_get"
      end
      # resource path
      local_var_path = '/v1/models/{model_owner}/{model_name}'.sub('{' + 'model_owner' + '}', CGI.escape(model_owner.to_s)).sub('{' + 'model_name' + '}', CGI.escape(model_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.models_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#models_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List public models
    # Get a paginated list of public models.  Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/models ```  The response will be a paginated JSON array of model objects:  ```json {   \"next\": null,   \"previous\": null,   \"results\": [     {       \"url\": \"https://replicate.com/replicate/hello-world\",       \"owner\": \"replicate\",       \"name\": \"hello-world\",       \"description\": \"A tiny model that says hello\",       \"visibility\": \"public\",       \"github_url\": \"https://github.com/replicate/cog-examples\",       \"paper_url\": null,       \"license_url\": null,       \"run_count\": 5681081,       \"cover_image_url\": \"...\",       \"default_example\": {...},       \"latest_version\": {...}     }   ] } ```  The `cover_image_url` string is an HTTPS URL for an image file. This can be:  - An image uploaded by the model author. - The output file of the example prediction, if the model author has not set a cover image. - The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file. - A generic fallback image. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def models_list(opts = {})
      models_list_with_http_info(opts)
      nil
    end

    # List public models
    # Get a paginated list of public models.  Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/models &#x60;&#x60;&#x60;  The response will be a paginated JSON array of model objects:  &#x60;&#x60;&#x60;json {   \&quot;next\&quot;: null,   \&quot;previous\&quot;: null,   \&quot;results\&quot;: [     {       \&quot;url\&quot;: \&quot;https://replicate.com/replicate/hello-world\&quot;,       \&quot;owner\&quot;: \&quot;replicate\&quot;,       \&quot;name\&quot;: \&quot;hello-world\&quot;,       \&quot;description\&quot;: \&quot;A tiny model that says hello\&quot;,       \&quot;visibility\&quot;: \&quot;public\&quot;,       \&quot;github_url\&quot;: \&quot;https://github.com/replicate/cog-examples\&quot;,       \&quot;paper_url\&quot;: null,       \&quot;license_url\&quot;: null,       \&quot;run_count\&quot;: 5681081,       \&quot;cover_image_url\&quot;: \&quot;...\&quot;,       \&quot;default_example\&quot;: {...},       \&quot;latest_version\&quot;: {...}     }   ] } &#x60;&#x60;&#x60;  The &#x60;cover_image_url&#x60; string is an HTTPS URL for an image file. This can be:  - An image uploaded by the model author. - The output file of the example prediction, if the model author has not set a cover image. - The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file. - A generic fallback image. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def models_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.models_list ...'
      end
      # resource path
      local_var_path = '/v1/models'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.models_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#models_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a model version
    # Delete a model version and all associated predictions, including all output files.  Model version deletion has some restrictions:  - You can only delete versions from models you own. - You can only delete versions from private models. - You cannot delete a version if someone other than you has run predictions with it.  Example cURL request:  ```command curl -s -X DELETE \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa ```  The response will be an empty 202, indicating the deletion request has been accepted. It might take a few minutes to be processed. 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param version_id [String] The ID of the version. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def models_versions_delete(model_owner, model_name, version_id, opts = {})
      models_versions_delete_with_http_info(model_owner, model_name, version_id, opts)
      nil
    end

    # Delete a model version
    # Delete a model version and all associated predictions, including all output files.  Model version deletion has some restrictions:  - You can only delete versions from models you own. - You can only delete versions from private models. - You cannot delete a version if someone other than you has run predictions with it.  Example cURL request:  &#x60;&#x60;&#x60;command curl -s -X DELETE \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa &#x60;&#x60;&#x60;  The response will be an empty 202, indicating the deletion request has been accepted. It might take a few minutes to be processed. 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param version_id [String] The ID of the version. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def models_versions_delete_with_http_info(model_owner, model_name, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.models_versions_delete ...'
      end
      # verify the required parameter 'model_owner' is set
      if @api_client.config.client_side_validation && model_owner.nil?
        fail ArgumentError, "Missing the required parameter 'model_owner' when calling DefaultApi.models_versions_delete"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.models_versions_delete"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling DefaultApi.models_versions_delete"
      end
      # resource path
      local_var_path = '/v1/models/{model_owner}/{model_name}/versions/{version_id}'.sub('{' + 'model_owner' + '}', CGI.escape(model_owner.to_s)).sub('{' + 'model_name' + '}', CGI.escape(model_name.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.models_versions_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#models_versions_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a model version
    # Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa ```  The response will be the version object:  ```json {   \"id\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",   \"created_at\": \"2022-04-26T19:29:04.418669Z\",   \"cog_version\": \"0.3.0\",   \"openapi_schema\": {...} } ```  Every model describes its inputs and outputs with [OpenAPI Schema Objects](https://spec.openapis.org/oas/latest.html#schemaObject) in the `openapi_schema` property.  The `openapi_schema.components.schemas.Input` property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:  ```json {   \"type\": \"object\",   \"title\": \"Input\",   \"required\": [     \"text\"   ],   \"properties\": {     \"text\": {       \"x-order\": 0,       \"type\": \"string\",       \"title\": \"Text\",       \"description\": \"Text to prefix with 'hello '\"     }   } } ```  The `openapi_schema.components.schemas.Output` property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:  ```json {   \"type\": \"string\",   \"title\": \"Output\" } ```  For more details, see the docs on [Cog's supported input and output types](https://github.com/replicate/cog/blob/75b7802219e7cd4cee845e34c4c22139558615d4/docs/python.md#input-and-output-types) 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param version_id [String] The ID of the version. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def models_versions_get(model_owner, model_name, version_id, opts = {})
      models_versions_get_with_http_info(model_owner, model_name, version_id, opts)
      nil
    end

    # Get a model version
    # Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa &#x60;&#x60;&#x60;  The response will be the version object:  &#x60;&#x60;&#x60;json {   \&quot;id\&quot;: \&quot;5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\&quot;,   \&quot;created_at\&quot;: \&quot;2022-04-26T19:29:04.418669Z\&quot;,   \&quot;cog_version\&quot;: \&quot;0.3.0\&quot;,   \&quot;openapi_schema\&quot;: {...} } &#x60;&#x60;&#x60;  Every model describes its inputs and outputs with [OpenAPI Schema Objects](https://spec.openapis.org/oas/latest.html#schemaObject) in the &#x60;openapi_schema&#x60; property.  The &#x60;openapi_schema.components.schemas.Input&#x60; property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:  &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;object\&quot;,   \&quot;title\&quot;: \&quot;Input\&quot;,   \&quot;required\&quot;: [     \&quot;text\&quot;   ],   \&quot;properties\&quot;: {     \&quot;text\&quot;: {       \&quot;x-order\&quot;: 0,       \&quot;type\&quot;: \&quot;string\&quot;,       \&quot;title\&quot;: \&quot;Text\&quot;,       \&quot;description\&quot;: \&quot;Text to prefix with &#39;hello &#39;\&quot;     }   } } &#x60;&#x60;&#x60;  The &#x60;openapi_schema.components.schemas.Output&#x60; property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:  &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;string\&quot;,   \&quot;title\&quot;: \&quot;Output\&quot; } &#x60;&#x60;&#x60;  For more details, see the docs on [Cog&#39;s supported input and output types](https://github.com/replicate/cog/blob/75b7802219e7cd4cee845e34c4c22139558615d4/docs/python.md#input-and-output-types) 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param version_id [String] The ID of the version. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def models_versions_get_with_http_info(model_owner, model_name, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.models_versions_get ...'
      end
      # verify the required parameter 'model_owner' is set
      if @api_client.config.client_side_validation && model_owner.nil?
        fail ArgumentError, "Missing the required parameter 'model_owner' when calling DefaultApi.models_versions_get"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.models_versions_get"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling DefaultApi.models_versions_get"
      end
      # resource path
      local_var_path = '/v1/models/{model_owner}/{model_name}/versions/{version_id}'.sub('{' + 'model_owner' + '}', CGI.escape(model_owner.to_s)).sub('{' + 'model_name' + '}', CGI.escape(model_name.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.models_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#models_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List model versions
    # Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/models/replicate/hello-world/versions ```  The response will be a JSON array of model version objects, sorted with the most recent version first:  ```json {   \"next\": null,   \"previous\": null,   \"results\": [     {       \"id\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",       \"created_at\": \"2022-04-26T19:29:04.418669Z\",       \"cog_version\": \"0.3.0\",       \"openapi_schema\": {...}     }   ] } ``` 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def models_versions_list(model_owner, model_name, opts = {})
      models_versions_list_with_http_info(model_owner, model_name, opts)
      nil
    end

    # List model versions
    # Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/models/replicate/hello-world/versions &#x60;&#x60;&#x60;  The response will be a JSON array of model version objects, sorted with the most recent version first:  &#x60;&#x60;&#x60;json {   \&quot;next\&quot;: null,   \&quot;previous\&quot;: null,   \&quot;results\&quot;: [     {       \&quot;id\&quot;: \&quot;5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\&quot;,       \&quot;created_at\&quot;: \&quot;2022-04-26T19:29:04.418669Z\&quot;,       \&quot;cog_version\&quot;: \&quot;0.3.0\&quot;,       \&quot;openapi_schema\&quot;: {...}     }   ] } &#x60;&#x60;&#x60; 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def models_versions_list_with_http_info(model_owner, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.models_versions_list ...'
      end
      # verify the required parameter 'model_owner' is set
      if @api_client.config.client_side_validation && model_owner.nil?
        fail ArgumentError, "Missing the required parameter 'model_owner' when calling DefaultApi.models_versions_list"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.models_versions_list"
      end
      # resource path
      local_var_path = '/v1/models/{model_owner}/{model_name}/versions'.sub('{' + 'model_owner' + '}', CGI.escape(model_owner.to_s)).sub('{' + 'model_name' + '}', CGI.escape(model_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.models_versions_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#models_versions_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a prediction
    # @param prediction_id [String] The ID of the prediction to cancel. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predictions_cancel(prediction_id, opts = {})
      predictions_cancel_with_http_info(prediction_id, opts)
      nil
    end

    # Cancel a prediction
    # @param prediction_id [String] The ID of the prediction to cancel. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def predictions_cancel_with_http_info(prediction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predictions_cancel ...'
      end
      # verify the required parameter 'prediction_id' is set
      if @api_client.config.client_side_validation && prediction_id.nil?
        fail ArgumentError, "Missing the required parameter 'prediction_id' when calling DefaultApi.predictions_cancel"
      end
      # resource path
      local_var_path = '/v1/predictions/{prediction_id}/cancel'.sub('{' + 'prediction_id' + '}', CGI.escape(prediction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.predictions_cancel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictions_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a prediction
    # Start a new prediction for the model version and inputs you provide.  Example request body:  ```json {   \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",   \"input\": {     \"text\": \"Alice\"   } } ```  Example cURL request:  ```console curl -s -X POST \\   -d '{\"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\", \"input\": {\"text\": \"Alice\"}}' \\   -H \"Authorization: Token <paste-your-token-here>\" \\   -H 'Content-Type: application/json' \\   https://api.replicate.com/v1/predictions ```  The response will be the prediction object:  ```json {   \"id\": \"gm3qorzdhgbfurvjtvhg6dckhu\",   \"model\": \"replicate/hello-world\",   \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",   \"input\": {     \"text\": \"Alice\"   },   \"logs\": \"\",   \"error\": null,   \"status\": \"starting\",   \"created_at\": \"2023-09-08T16:19:34.765994657Z\",   \"urls\": {     \"cancel\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\",     \"get\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\"   } } ```  As models can take several seconds or more to run, the output will not be available immediately. To get the final result of the prediction you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a prediction](#predictions.get) endpoint until it has finished.  Input and output (including any files) will be automatically deleted after an hour, so you must save a copy of any files in the output if you'd like to continue using them.  Output files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it. 
    # @param [Hash] opts the optional parameters
    # @option opts [PredictionsCreateRequest] :predictions_create_request 
    # @return [ApiResponse]
    def predictions_create(opts = {})
      data, _status_code, _headers = predictions_create_with_http_info(opts)
      data
    end

    # Create a prediction
    # Start a new prediction for the model version and inputs you provide.  Example request body:  &#x60;&#x60;&#x60;json {   \&quot;version\&quot;: \&quot;5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\&quot;,   \&quot;input\&quot;: {     \&quot;text\&quot;: \&quot;Alice\&quot;   } } &#x60;&#x60;&#x60;  Example cURL request:  &#x60;&#x60;&#x60;console curl -s -X POST \\   -d &#39;{\&quot;version\&quot;: \&quot;5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\&quot;, \&quot;input\&quot;: {\&quot;text\&quot;: \&quot;Alice\&quot;}}&#39; \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   -H &#39;Content-Type: application/json&#39; \\   https://api.replicate.com/v1/predictions &#x60;&#x60;&#x60;  The response will be the prediction object:  &#x60;&#x60;&#x60;json {   \&quot;id\&quot;: \&quot;gm3qorzdhgbfurvjtvhg6dckhu\&quot;,   \&quot;model\&quot;: \&quot;replicate/hello-world\&quot;,   \&quot;version\&quot;: \&quot;5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\&quot;,   \&quot;input\&quot;: {     \&quot;text\&quot;: \&quot;Alice\&quot;   },   \&quot;logs\&quot;: \&quot;\&quot;,   \&quot;error\&quot;: null,   \&quot;status\&quot;: \&quot;starting\&quot;,   \&quot;created_at\&quot;: \&quot;2023-09-08T16:19:34.765994657Z\&quot;,   \&quot;urls\&quot;: {     \&quot;cancel\&quot;: \&quot;https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\&quot;,     \&quot;get\&quot;: \&quot;https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\&quot;   } } &#x60;&#x60;&#x60;  As models can take several seconds or more to run, the output will not be available immediately. To get the final result of the prediction you should either provide a &#x60;webhook&#x60; HTTPS URL for us to call when the results are ready, or poll the [get a prediction](#predictions.get) endpoint until it has finished.  Input and output (including any files) will be automatically deleted after an hour, so you must save a copy of any files in the output if you&#39;d like to continue using them.  Output files are served by &#x60;replicate.delivery&#x60; and its subdomains. If you use an allow list of external domains for your assets, add &#x60;replicate.delivery&#x60; and &#x60;*.replicate.delivery&#x60; to it. 
    # @param [Hash] opts the optional parameters
    # @option opts [PredictionsCreateRequest] :predictions_create_request 
    # @return [Array<(ApiResponse, Integer, Hash)>] ApiResponse data, response status code and response headers
    def predictions_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predictions_create ...'
      end
      # resource path
      local_var_path = '/v1/predictions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'predictions_create_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.predictions_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictions_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a prediction
    # Get the current state of a prediction.  Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu ```  The response will be the prediction object:  ```json {   \"id\": \"gm3qorzdhgbfurvjtvhg6dckhu\",   \"model\": \"replicate/hello-world\",   \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",   \"input\": {     \"text\": \"Alice\"   },   \"logs\": \"\",   \"output\": \"hello Alice\",   \"error\": null,   \"status\": \"succeeded\",   \"created_at\": \"2023-09-08T16:19:34.765994Z\",   \"started_at\": \"2023-09-08T16:19:34.779176Z\",   \"completed_at\": \"2023-09-08T16:19:34.791859Z\",   \"metrics\": {     \"predict_time\": 0.012683   },   \"urls\": {     \"cancel\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\",     \"get\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\"   } } ```  `status` will be one of:  - `starting`: the prediction is starting up. If this status lasts longer than a few seconds, then it's typically because a new worker is being started to run the prediction. - `processing`: the `predict()` method of the model is currently running. - `succeeded`: the prediction completed successfully. - `failed`: the prediction encountered an error during processing. - `canceled`: the prediction was canceled by its creator.  In the case of success, `output` will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You'll need to pass the `Authorization` header to request them.  In the case of failure, `error` will contain the error encountered during the prediction.  Terminated predictions (with a status of `succeeded`, `failed`, or `canceled`) will include a `metrics` object with a `predict_time` property showing the amount of CPU or GPU time, in seconds, that the prediction used while running. It won't include time waiting for the prediction to start.  Input and output (including any files) are automatically deleted after an hour, so you must save a copy of any files in the output if you'd like to continue using them.  Output files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it. 
    # @param prediction_id [String] The ID of the prediction to get. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predictions_get(prediction_id, opts = {})
      predictions_get_with_http_info(prediction_id, opts)
      nil
    end

    # Get a prediction
    # Get the current state of a prediction.  Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu &#x60;&#x60;&#x60;  The response will be the prediction object:  &#x60;&#x60;&#x60;json {   \&quot;id\&quot;: \&quot;gm3qorzdhgbfurvjtvhg6dckhu\&quot;,   \&quot;model\&quot;: \&quot;replicate/hello-world\&quot;,   \&quot;version\&quot;: \&quot;5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\&quot;,   \&quot;input\&quot;: {     \&quot;text\&quot;: \&quot;Alice\&quot;   },   \&quot;logs\&quot;: \&quot;\&quot;,   \&quot;output\&quot;: \&quot;hello Alice\&quot;,   \&quot;error\&quot;: null,   \&quot;status\&quot;: \&quot;succeeded\&quot;,   \&quot;created_at\&quot;: \&quot;2023-09-08T16:19:34.765994Z\&quot;,   \&quot;started_at\&quot;: \&quot;2023-09-08T16:19:34.779176Z\&quot;,   \&quot;completed_at\&quot;: \&quot;2023-09-08T16:19:34.791859Z\&quot;,   \&quot;metrics\&quot;: {     \&quot;predict_time\&quot;: 0.012683   },   \&quot;urls\&quot;: {     \&quot;cancel\&quot;: \&quot;https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\&quot;,     \&quot;get\&quot;: \&quot;https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\&quot;   } } &#x60;&#x60;&#x60;  &#x60;status&#x60; will be one of:  - &#x60;starting&#x60;: the prediction is starting up. If this status lasts longer than a few seconds, then it&#39;s typically because a new worker is being started to run the prediction. - &#x60;processing&#x60;: the &#x60;predict()&#x60; method of the model is currently running. - &#x60;succeeded&#x60;: the prediction completed successfully. - &#x60;failed&#x60;: the prediction encountered an error during processing. - &#x60;canceled&#x60;: the prediction was canceled by its creator.  In the case of success, &#x60;output&#x60; will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You&#39;ll need to pass the &#x60;Authorization&#x60; header to request them.  In the case of failure, &#x60;error&#x60; will contain the error encountered during the prediction.  Terminated predictions (with a status of &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;canceled&#x60;) will include a &#x60;metrics&#x60; object with a &#x60;predict_time&#x60; property showing the amount of CPU or GPU time, in seconds, that the prediction used while running. It won&#39;t include time waiting for the prediction to start.  Input and output (including any files) are automatically deleted after an hour, so you must save a copy of any files in the output if you&#39;d like to continue using them.  Output files are served by &#x60;replicate.delivery&#x60; and its subdomains. If you use an allow list of external domains for your assets, add &#x60;replicate.delivery&#x60; and &#x60;*.replicate.delivery&#x60; to it. 
    # @param prediction_id [String] The ID of the prediction to get. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def predictions_get_with_http_info(prediction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predictions_get ...'
      end
      # verify the required parameter 'prediction_id' is set
      if @api_client.config.client_side_validation && prediction_id.nil?
        fail ArgumentError, "Missing the required parameter 'prediction_id' when calling DefaultApi.predictions_get"
      end
      # resource path
      local_var_path = '/v1/predictions/{prediction_id}'.sub('{' + 'prediction_id' + '}', CGI.escape(prediction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.predictions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List predictions
    # Get a paginated list of predictions that you've created. This will include predictions created from the API and the website. It will return 100 records per page.  Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/predictions ```  The response will be a paginated JSON array of prediction objects, sorted with the most recent prediction first:  ```json {   \"next\": null,   \"previous\": null,   \"results\": [     {       \"completed_at\": \"2023-09-08T16:19:34.791859Z\",       \"created_at\": \"2023-09-08T16:19:34.907244Z\",       \"error\": null,       \"id\": \"gm3qorzdhgbfurvjtvhg6dckhu\",       \"input\": {         \"text\": \"Alice\"       },       \"metrics\": {         \"predict_time\": 0.012683       },       \"output\": \"hello Alice\",       \"started_at\": \"2023-09-08T16:19:34.779176Z\",       \"source\": \"api\",       \"status\": \"succeeded\",       \"urls\": {         \"get\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\",         \"cancel\": \"https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\"       },       \"model\": \"replicate/hello-world\",       \"version\": \"5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\",     }   ] } ```  `id` will be the unique ID of the prediction.  `source` will indicate how the prediction was created. Possible values are `web` or `api`.  `status` will be the status of the prediction. Refer to [get a single prediction](#predictions.get) for possible values.  `urls` will be a convenience object that can be used to construct new API requests for the given prediction.  `model` will be the model identifier string in the format of `{model_owner}/{model_name}`.  `version` will be the unique ID of model version used to create the prediction. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predictions_list(opts = {})
      predictions_list_with_http_info(opts)
      nil
    end

    # List predictions
    # Get a paginated list of predictions that you&#39;ve created. This will include predictions created from the API and the website. It will return 100 records per page.  Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/predictions &#x60;&#x60;&#x60;  The response will be a paginated JSON array of prediction objects, sorted with the most recent prediction first:  &#x60;&#x60;&#x60;json {   \&quot;next\&quot;: null,   \&quot;previous\&quot;: null,   \&quot;results\&quot;: [     {       \&quot;completed_at\&quot;: \&quot;2023-09-08T16:19:34.791859Z\&quot;,       \&quot;created_at\&quot;: \&quot;2023-09-08T16:19:34.907244Z\&quot;,       \&quot;error\&quot;: null,       \&quot;id\&quot;: \&quot;gm3qorzdhgbfurvjtvhg6dckhu\&quot;,       \&quot;input\&quot;: {         \&quot;text\&quot;: \&quot;Alice\&quot;       },       \&quot;metrics\&quot;: {         \&quot;predict_time\&quot;: 0.012683       },       \&quot;output\&quot;: \&quot;hello Alice\&quot;,       \&quot;started_at\&quot;: \&quot;2023-09-08T16:19:34.779176Z\&quot;,       \&quot;source\&quot;: \&quot;api\&quot;,       \&quot;status\&quot;: \&quot;succeeded\&quot;,       \&quot;urls\&quot;: {         \&quot;get\&quot;: \&quot;https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu\&quot;,         \&quot;cancel\&quot;: \&quot;https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel\&quot;       },       \&quot;model\&quot;: \&quot;replicate/hello-world\&quot;,       \&quot;version\&quot;: \&quot;5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa\&quot;,     }   ] } &#x60;&#x60;&#x60;  &#x60;id&#x60; will be the unique ID of the prediction.  &#x60;source&#x60; will indicate how the prediction was created. Possible values are &#x60;web&#x60; or &#x60;api&#x60;.  &#x60;status&#x60; will be the status of the prediction. Refer to [get a single prediction](#predictions.get) for possible values.  &#x60;urls&#x60; will be a convenience object that can be used to construct new API requests for the given prediction.  &#x60;model&#x60; will be the model identifier string in the format of &#x60;{model_owner}/{model_name}&#x60;.  &#x60;version&#x60; will be the unique ID of model version used to create the prediction. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def predictions_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predictions_list ...'
      end
      # resource path
      local_var_path = '/v1/predictions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.predictions_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictions_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a training
    # @param training_id [String] The ID of the training you want to cancel. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def trainings_cancel(training_id, opts = {})
      trainings_cancel_with_http_info(training_id, opts)
      nil
    end

    # Cancel a training
    # @param training_id [String] The ID of the training you want to cancel. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def trainings_cancel_with_http_info(training_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.trainings_cancel ...'
      end
      # verify the required parameter 'training_id' is set
      if @api_client.config.client_side_validation && training_id.nil?
        fail ArgumentError, "Missing the required parameter 'training_id' when calling DefaultApi.trainings_cancel"
      end
      # resource path
      local_var_path = '/v1/trainings/{training_id}/cancel'.sub('{' + 'training_id' + '}', CGI.escape(training_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.trainings_cancel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#trainings_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a training
    # Start a new training of the model version you specify.  Example request body:  ```json {   \"destination\": \"{new_owner}/{new_name}\",   \"input\": {     \"train_data\": \"https://example.com/my-input-images.zip\",   },   \"webhook\": \"https://example.com/my-webhook\", } ```  Example cURL request:  ```console curl -s -X POST \\   -d '{\"destination\": \"{new_owner}/{new_name}\", \"input\": {\"input_images\": \"https://example.com/my-input-images.zip\"}}' \\   -H \"Authorization: Token <paste-your-token-here>\" \\   -H 'Content-Type: application/json' \\   https://api.replicate.com/v1/models/stability-ai/sdxl/versions/da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf/trainings ```  The response will be the training object:  ```json {   \"id\": \"zz4ibbonubfz7carwiefibzgga\",   \"model\": \"stability-ai/sdxl\",   \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",   \"input\": {     \"input_images\": \"https://example.com/my-input-images.zip\"   },   \"logs\": \"\",   \"error\": null,   \"status\": \"starting\",   \"created_at\": \"2023-09-08T16:32:56.990893084Z\",   \"urls\": {     \"cancel\": \"https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga/cancel\",     \"get\": \"https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga\"   } } ```  As models can take several minutes or more to train, the result will not be available immediately. To get the final result of the training you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a training](#trainings.get) endpoint until it has finished.  When a training completes, it creates a new [version](https://replicate.com/docs/how-does-replicate-work#terminology) of the model at the specified destination.  To find some models to train on, check out the [trainable language models collection](https://replicate.com/collections/trainable-language-models). 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param version_id [String] The ID of the version. 
    # @param [Hash] opts the optional parameters
    # @option opts [TrainingsCreateRequest] :trainings_create_request 
    # @return [ApiResponse]
    def trainings_create(model_owner, model_name, version_id, opts = {})
      data, _status_code, _headers = trainings_create_with_http_info(model_owner, model_name, version_id, opts)
      data
    end

    # Create a training
    # Start a new training of the model version you specify.  Example request body:  &#x60;&#x60;&#x60;json {   \&quot;destination\&quot;: \&quot;{new_owner}/{new_name}\&quot;,   \&quot;input\&quot;: {     \&quot;train_data\&quot;: \&quot;https://example.com/my-input-images.zip\&quot;,   },   \&quot;webhook\&quot;: \&quot;https://example.com/my-webhook\&quot;, } &#x60;&#x60;&#x60;  Example cURL request:  &#x60;&#x60;&#x60;console curl -s -X POST \\   -d &#39;{\&quot;destination\&quot;: \&quot;{new_owner}/{new_name}\&quot;, \&quot;input\&quot;: {\&quot;input_images\&quot;: \&quot;https://example.com/my-input-images.zip\&quot;}}&#39; \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   -H &#39;Content-Type: application/json&#39; \\   https://api.replicate.com/v1/models/stability-ai/sdxl/versions/da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf/trainings &#x60;&#x60;&#x60;  The response will be the training object:  &#x60;&#x60;&#x60;json {   \&quot;id\&quot;: \&quot;zz4ibbonubfz7carwiefibzgga\&quot;,   \&quot;model\&quot;: \&quot;stability-ai/sdxl\&quot;,   \&quot;version\&quot;: \&quot;da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\&quot;,   \&quot;input\&quot;: {     \&quot;input_images\&quot;: \&quot;https://example.com/my-input-images.zip\&quot;   },   \&quot;logs\&quot;: \&quot;\&quot;,   \&quot;error\&quot;: null,   \&quot;status\&quot;: \&quot;starting\&quot;,   \&quot;created_at\&quot;: \&quot;2023-09-08T16:32:56.990893084Z\&quot;,   \&quot;urls\&quot;: {     \&quot;cancel\&quot;: \&quot;https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga/cancel\&quot;,     \&quot;get\&quot;: \&quot;https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga\&quot;   } } &#x60;&#x60;&#x60;  As models can take several minutes or more to train, the result will not be available immediately. To get the final result of the training you should either provide a &#x60;webhook&#x60; HTTPS URL for us to call when the results are ready, or poll the [get a training](#trainings.get) endpoint until it has finished.  When a training completes, it creates a new [version](https://replicate.com/docs/how-does-replicate-work#terminology) of the model at the specified destination.  To find some models to train on, check out the [trainable language models collection](https://replicate.com/collections/trainable-language-models). 
    # @param model_owner [String] The name of the user or organization that owns the model. 
    # @param model_name [String] The name of the model. 
    # @param version_id [String] The ID of the version. 
    # @param [Hash] opts the optional parameters
    # @option opts [TrainingsCreateRequest] :trainings_create_request 
    # @return [Array<(ApiResponse, Integer, Hash)>] ApiResponse data, response status code and response headers
    def trainings_create_with_http_info(model_owner, model_name, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.trainings_create ...'
      end
      # verify the required parameter 'model_owner' is set
      if @api_client.config.client_side_validation && model_owner.nil?
        fail ArgumentError, "Missing the required parameter 'model_owner' when calling DefaultApi.trainings_create"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.trainings_create"
      end
      # verify the required parameter 'version_id' is set
      if @api_client.config.client_side_validation && version_id.nil?
        fail ArgumentError, "Missing the required parameter 'version_id' when calling DefaultApi.trainings_create"
      end
      # resource path
      local_var_path = '/v1/models/{model_owner}/{model_name}/versions/{version_id}/trainings'.sub('{' + 'model_owner' + '}', CGI.escape(model_owner.to_s)).sub('{' + 'model_name' + '}', CGI.escape(model_name.to_s)).sub('{' + 'version_id' + '}', CGI.escape(version_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'trainings_create_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.trainings_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#trainings_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a training
    # Get the current state of a training.  Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga ```  The response will be the training object:  ```json {   \"completed_at\": \"2023-09-08T16:41:19.826523Z\",   \"created_at\": \"2023-09-08T16:32:57.018467Z\",   \"error\": null,   \"id\": \"zz4ibbonubfz7carwiefibzgga\",   \"input\": {     \"input_images\": \"https://example.com/my-input-images.zip\"   },   \"logs\": \"...\",   \"metrics\": {     \"predict_time\": 502.713876   },   \"output\": {     \"version\": \"...\",     \"weights\": \"...\"   },   \"started_at\": \"2023-09-08T16:32:57.112647Z\",   \"status\": \"succeeded\",   \"urls\": {     \"get\": \"https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\",     \"cancel\": \"https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel\"   },   \"model\": \"stability-ai/sdxl\",   \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\", } ```  `status` will be one of:  - `starting`: the training is starting up. If this status lasts longer than a few seconds, then it's typically because a new worker is being started to run the training. - `processing`: the `train()` method of the model is currently running. - `succeeded`: the training completed successfully. - `failed`: the training encountered an error during processing. - `canceled`: the training was canceled by its creator.  In the case of success, `output` will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You'll need to pass the `Authorization` header to request them.  In the case of failure, `error` will contain the error encountered during the training.  Terminated trainings (with a status of `succeeded`, `failed`, or `canceled`) will include a `metrics` object with a `predict_time` property showing the amount of CPU or GPU time, in seconds, that the training used while running. It won't include time waiting for the training to start. 
    # @param training_id [String] The ID of the training to get. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def trainings_get(training_id, opts = {})
      trainings_get_with_http_info(training_id, opts)
      nil
    end

    # Get a training
    # Get the current state of a training.  Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga &#x60;&#x60;&#x60;  The response will be the training object:  &#x60;&#x60;&#x60;json {   \&quot;completed_at\&quot;: \&quot;2023-09-08T16:41:19.826523Z\&quot;,   \&quot;created_at\&quot;: \&quot;2023-09-08T16:32:57.018467Z\&quot;,   \&quot;error\&quot;: null,   \&quot;id\&quot;: \&quot;zz4ibbonubfz7carwiefibzgga\&quot;,   \&quot;input\&quot;: {     \&quot;input_images\&quot;: \&quot;https://example.com/my-input-images.zip\&quot;   },   \&quot;logs\&quot;: \&quot;...\&quot;,   \&quot;metrics\&quot;: {     \&quot;predict_time\&quot;: 502.713876   },   \&quot;output\&quot;: {     \&quot;version\&quot;: \&quot;...\&quot;,     \&quot;weights\&quot;: \&quot;...\&quot;   },   \&quot;started_at\&quot;: \&quot;2023-09-08T16:32:57.112647Z\&quot;,   \&quot;status\&quot;: \&quot;succeeded\&quot;,   \&quot;urls\&quot;: {     \&quot;get\&quot;: \&quot;https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\&quot;,     \&quot;cancel\&quot;: \&quot;https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel\&quot;   },   \&quot;model\&quot;: \&quot;stability-ai/sdxl\&quot;,   \&quot;version\&quot;: \&quot;da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\&quot;, } &#x60;&#x60;&#x60;  &#x60;status&#x60; will be one of:  - &#x60;starting&#x60;: the training is starting up. If this status lasts longer than a few seconds, then it&#39;s typically because a new worker is being started to run the training. - &#x60;processing&#x60;: the &#x60;train()&#x60; method of the model is currently running. - &#x60;succeeded&#x60;: the training completed successfully. - &#x60;failed&#x60;: the training encountered an error during processing. - &#x60;canceled&#x60;: the training was canceled by its creator.  In the case of success, &#x60;output&#x60; will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You&#39;ll need to pass the &#x60;Authorization&#x60; header to request them.  In the case of failure, &#x60;error&#x60; will contain the error encountered during the training.  Terminated trainings (with a status of &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;canceled&#x60;) will include a &#x60;metrics&#x60; object with a &#x60;predict_time&#x60; property showing the amount of CPU or GPU time, in seconds, that the training used while running. It won&#39;t include time waiting for the training to start. 
    # @param training_id [String] The ID of the training to get. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def trainings_get_with_http_info(training_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.trainings_get ...'
      end
      # verify the required parameter 'training_id' is set
      if @api_client.config.client_side_validation && training_id.nil?
        fail ArgumentError, "Missing the required parameter 'training_id' when calling DefaultApi.trainings_get"
      end
      # resource path
      local_var_path = '/v1/trainings/{training_id}'.sub('{' + 'training_id' + '}', CGI.escape(training_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.trainings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#trainings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List trainings
    # Get a paginated list of trainings that you've created. This will include trainings created from the API and the website. It will return 100 records per page.  Example cURL request:  ```console curl -s \\   -H \"Authorization: Token <paste-your-token-here>\" \\   https://api.replicate.com/v1/trainings ```  The response will be a paginated JSON array of training objects, sorted with the most recent training first:  ```json {   \"next\": null,   \"previous\": null,   \"results\": [     {       \"completed_at\": \"2023-09-08T16:41:19.826523Z\",       \"created_at\": \"2023-09-08T16:32:57.018467Z\",       \"error\": null,       \"id\": \"zz4ibbonubfz7carwiefibzgga\",       \"input\": {         \"input_images\": \"https://example.com/my-input-images.zip\"       },       \"metrics\": {         \"predict_time\": 502.713876       },       \"output\": {         \"version\": \"...\",         \"weights\": \"...\"       },       \"started_at\": \"2023-09-08T16:32:57.112647Z\",       \"source\": \"api\",       \"status\": \"succeeded\",       \"urls\": {         \"get\": \"https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\",         \"cancel\": \"https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel\"       },       \"model\": \"stability-ai/sdxl\",       \"version\": \"da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\",     }   ] } ```  `id` will be the unique ID of the training.  `source` will indicate how the training was created. Possible values are `web` or `api`.  `status` will be the status of the training. Refer to [get a single training](#trainings.get) for possible values.  `urls` will be a convenience object that can be used to construct new API requests for the given training.  `version` will be the unique ID of model version used to create the training. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def trainings_list(opts = {})
      trainings_list_with_http_info(opts)
      nil
    end

    # List trainings
    # Get a paginated list of trainings that you&#39;ve created. This will include trainings created from the API and the website. It will return 100 records per page.  Example cURL request:  &#x60;&#x60;&#x60;console curl -s \\   -H \&quot;Authorization: Token &lt;paste-your-token-here&gt;\&quot; \\   https://api.replicate.com/v1/trainings &#x60;&#x60;&#x60;  The response will be a paginated JSON array of training objects, sorted with the most recent training first:  &#x60;&#x60;&#x60;json {   \&quot;next\&quot;: null,   \&quot;previous\&quot;: null,   \&quot;results\&quot;: [     {       \&quot;completed_at\&quot;: \&quot;2023-09-08T16:41:19.826523Z\&quot;,       \&quot;created_at\&quot;: \&quot;2023-09-08T16:32:57.018467Z\&quot;,       \&quot;error\&quot;: null,       \&quot;id\&quot;: \&quot;zz4ibbonubfz7carwiefibzgga\&quot;,       \&quot;input\&quot;: {         \&quot;input_images\&quot;: \&quot;https://example.com/my-input-images.zip\&quot;       },       \&quot;metrics\&quot;: {         \&quot;predict_time\&quot;: 502.713876       },       \&quot;output\&quot;: {         \&quot;version\&quot;: \&quot;...\&quot;,         \&quot;weights\&quot;: \&quot;...\&quot;       },       \&quot;started_at\&quot;: \&quot;2023-09-08T16:32:57.112647Z\&quot;,       \&quot;source\&quot;: \&quot;api\&quot;,       \&quot;status\&quot;: \&quot;succeeded\&quot;,       \&quot;urls\&quot;: {         \&quot;get\&quot;: \&quot;https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga\&quot;,         \&quot;cancel\&quot;: \&quot;https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel\&quot;       },       \&quot;model\&quot;: \&quot;stability-ai/sdxl\&quot;,       \&quot;version\&quot;: \&quot;da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf\&quot;,     }   ] } &#x60;&#x60;&#x60;  &#x60;id&#x60; will be the unique ID of the training.  &#x60;source&#x60; will indicate how the training was created. Possible values are &#x60;web&#x60; or &#x60;api&#x60;.  &#x60;status&#x60; will be the status of the training. Refer to [get a single training](#trainings.get) for possible values.  &#x60;urls&#x60; will be a convenience object that can be used to construct new API requests for the given training.  &#x60;version&#x60; will be the unique ID of model version used to create the training. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def trainings_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.trainings_list ...'
      end
      # resource path
      local_var_path = '/v1/trainings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['TokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.trainings_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#trainings_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
